<div class="container">
  <h2>Price comparison</h2>


 <div id="chart_div" style="width: 1200px; height: 900px;" data-target="<%=  @chart_points.to_json %>"></div>

 <h3>Detailed comparison</h3>


 <p><%= @orgininal_offer.title %></p>


 <% @received_offers.each do |offer| %>
 <div class="content-container">
   <h3><%= link_to offer.title, offer_path(offer) %></h3>
   <div class="row">
    <% @offer_lines.each do |offer_line| %>
    <% product = Product.find(offer_line.product_id) %>
    <% if offer_line.offer_id == offer.id %>
    <div class="col">
      <ul class="product-list">
        <li><b>Product</b>: <%= product.name %>: $<%= offer_line.price %></li>
        <li><b>Brand</b>: <%= offer_line.product.brand %></li>
        <li><b>SKU</b>: <%= offer_line.product.nr_per_sku %> * <%= offer_line.product.weight_in_kg %> kg</li>
      </ul>
    </div>
    <% end %>
    <% end %>
  </div>
 </div>
<% end %>


</div>


  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript">
    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);
    const chartData = JSON.parse(document.getElementById('chart_div').dataset.target)

    function getCol(matrix, col){
       var column = [];
       for(var i=0; i<matrix.length; i++){
          column.push(matrix[i][col]);
       }
       return column;
    }

    const priceArray = getCol(chartData, 0);

    console.log(Math.ceil(Math.min(...priceArray)));


    function drawChart() {
       var dataTable = new google.visualization.DataTable();
        dataTable.addColumn('number', 'Price');
        dataTable.addColumn('number', 'Product');
        dataTable.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        dataTable.addColumn({type: 'string', role: 'style'});
        dataTable.addColumn({type:'string', role:'annotation'});


        dataTable.addRows(
          chartData
        );

        var options = {
          title: 'Product prices',
          hAxis: {title: 'Price (â‚¬/kg)', minValue: Math.ceil(Math.min(...priceArray)), maxValue: Math.ceil(Math.max(...priceArray)), gridlines: {count: 0}, minorGridlines: {count: 0}},
          vAxis: {title: 'Product', minValue: 1, maxValue: 3.5, minorGridlines: {count: 0}, textStyle: {color: '#ffffff'}},
          legend: 'none',
          pointSize: 15,
          tooltip: { isHtml: true },
          annotations: {
              boxStyle: {
                // Color of the box outline.
                stroke: '#888',
                // Thickness of the box outline.
                strokeWidth: 1,
                // x-radius of the corner curvature.
                rx: 5,
                // y-radius of the corner curvature.
                ry: 5,
                // Attributes for linear gradient fill.
                gradient: {
                  // Start color for gradient.
                  color1: '#fbf6a7',
                  // Finish color for gradient.
                  color2: '#33b679',
                  // Where on the boundary to start and
                  // end the color1/color2 gradient,
                  // relative to the upper left corner
                  // of the boundary.
                  x1: '0%', y1: '0%',
                  x2: '100%', y2: '100%',
                  // If true, the boundary for x1,
                  // y1, x2, and y2 is the box. If
                  // false, it's the entire chart.
                  useObjectBoundingBoxUnits: true
                }
              }
            }

        };

        var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));
        chart.draw(dataTable, options);

        google.visualization.events.addListener(chart, 'select', selectHandler);
        google.visualization.events.addListener(chart, 'onmouseover', pointerHover);
        google.visualization.events.addListener(chart, 'onmouseout', pointerUnHover);

        function pointerHover(){
          document.getElementById('chart_div').style.cursor = 'pointer'
        }

        function pointerUnHover(){
          document.getElementById('chart_div').style.cursor = 'default'
        }

        function selectHandler() {
          var selection = chart.getSelection();
          console.log(selection[0].row);

         console.log(chartData[selection[0].row])
         var wrapper= document.createElement('div');
         wrapper.innerHTML = chartData[selection[0].row][2]

         console.log(wrapper)
        window.location = wrapper.firstChild.dataset.target
                 }

   }
 </script>
